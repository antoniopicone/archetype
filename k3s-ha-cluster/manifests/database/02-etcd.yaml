---
apiVersion: v1
kind: Service
metadata:
  name: etcd-headless
  namespace: database
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
  - name: client
    port: 2379
    targetPort: 2379
  - name: peer
    port: 2380
    targetPort: 2380
  selector:
    app: etcd
---
apiVersion: v1
kind: Service
metadata:
  name: etcd
  namespace: database
spec:
  type: ClusterIP
  ports:
  - name: client
    port: 2379
    targetPort: 2379
  selector:
    app: etcd
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: etcd
  namespace: database
spec:
  serviceName: etcd-headless
  replicas: 3
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: etcd
  template:
    metadata:
      labels:
        app: etcd
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - etcd
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/witness
                operator: DoesNotExist
      containers:
      - name: etcd
        image: docker.io/bitnami/etcd:3.5.15
        ports:
        - containerPort: 2379
          name: client
        - containerPort: 2380
          name: peer
        command:
        - /bin/sh
        - -c
        - |
          HOSTNAME=$(hostname)
          DOMAIN="etcd-headless.database.svc.cluster.local"

          # Aspetta DNS per tutti i membri
          echo "Waiting for DNS resolution..."
          for i in 0 1 2; do
            until nslookup etcd-${i}.${DOMAIN}; do
              echo "Waiting for etcd-${i} DNS..."
              sleep 2
            done
            echo "etcd-${i} DNS resolved"
          done

          echo "Starting etcd as ${HOSTNAME}"
          exec /usr/local/bin/etcd \
            --name=${HOSTNAME} \
            --listen-peer-urls=http://0.0.0.0:2380 \
            --listen-client-urls=http://0.0.0.0:2379 \
            --advertise-client-urls=http://${HOSTNAME}.${DOMAIN}:2379 \
            --initial-advertise-peer-urls=http://${HOSTNAME}.${DOMAIN}:2380 \
            --initial-cluster-token=etcd-cluster \
            --initial-cluster=etcd-0=http://etcd-0.${DOMAIN}:2380,etcd-1=http://etcd-1.${DOMAIN}:2380,etcd-2=http://etcd-2.${DOMAIN}:2380 \
            --initial-cluster-state=new \
            --data-dir=/var/lib/etcd
        env:
        - name: ETCDCTL_API
          value: "3"
        volumeMounts:
        - name: data
          mountPath: /var/lib/etcd
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - /usr/local/bin/etcdctl endpoint health
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - /usr/local/bin/etcdctl endpoint health
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: longhorn-replicated
      resources:
        requests:
          storage: 2Gi
